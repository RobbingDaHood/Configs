<?xml version="1.0" encoding="UTF-8"?>
<ruleset name="Nykredit" xmlns="http://pmd.sf.net/ruleset/1.0.0"
	xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
	xsi:schemaLocation="http://pmd.sf.net/ruleset/1.0.0 http://pmd.sf.net/ruleset_xml_schema.xsd"
	xsi:noNamespaceSchemaLocation="http://pmd.sf.net/ruleset_xml_schema.xsd">

    <description>
   The Nykredit ruleset checks for thing in your code that Findbugs or checkstyle does not get.
    </description>

	<!-- We'll use the entire 'strings' ruleset -->
    <rule ref="rulesets/java/unusedcode.xml" />
    <rule ref="rulesets/java/sunsecure.xml">
        <exclude name="ArrayIsStoredDirectly" />
    </rule>
    <rule ref="rulesets/java/strings.xml">
        <exclude name="AppendCharacterWithChar" />
        <exclude name="AvoidDuplicateLiterals" />
        <exclude name="AvoidStringBufferField" />
        <exclude name="ConsecutiveLiteralAppends" />
    </rule>
    <rule ref="rulesets/java/strings.xml/AvoidStringBufferField" >
        <description>
		<![CDATA[
			StringBuffers can grow quite a lot, and so may become a source of memory leak (if the owning class has a long life time).
		]]>
        </description>
        <priority>5</priority>
        <properties>
            <property name="xpath">
                <value><![CDATA[
//FieldDeclaration/Type/ReferenceType/ClassOrInterfaceType[@Image = 'StringBuffer']
]]>
                </value>
            </property>
        </properties>
        <example>
<![CDATA[
class Foo {
	private StringBuffer memoryLeak;
}
]]>
        </example>
    </rule>
    <rule ref="rulesets/java/strictexception.xml">
        <exclude name="SignatureDeclareThrowsException" />
        <exclude name="AvoidThrowingRawExceptionTypes" />
        <exclude name="AvoidCatchingThrowable" />
    </rule>
    <rule ref="rulesets/java/optimizations.xml">
        <exclude name="MethodArgumentCouldBeFinal" />
        <exclude name="LocalVariableCouldBeFinal" />
        <exclude name="AvoidInstantiatingObjectsInLoops" />
    </rule>
    <rule ref="rulesets/java/naming.xml">
        <exclude name="VariableNamingConventions" />
        <exclude name="ClassNamingConventions" />
        <exclude name="AvoidFieldNameMatchingTypeName" />
        <exclude name="ShortVariable" />
        <exclude name="LongVariable" />
        <exclude name="AbstractNaming" />
        <exclude name="AvoidFieldNameMatchingMethodName" />
    </rule>
    <rule ref="rulesets/java/migrating.xml" />
    <rule ref="rulesets/java/javabeans.xml">
        <exclude name="BeanMembersShouldSerialize" />
    </rule>
    <rule ref="rulesets/java/j2ee.xml" />
    <rule ref="rulesets/java/finalizers.xml" />
    <rule ref="rulesets/java/design.xml">
        <exclude name="SimplifyBooleanReturns" />
        <exclude name="SwitchStmtsShouldHaveDefault" />
        <exclude name="UseLocaleWithCaseConversions" />
        <exclude name="ConfusingTernary" />
        <exclude name="AvoidDeeplyNestedIfStmts" />
        <exclude name="AvoidReassigningParameters" />
    </rule>
    <rule ref="rulesets/java/controversial.xml" >
        <exclude name="CallSuperInConstructor" />
        <!--<exclude name="BooleanInversion" />-->
        <exclude name="AvoidFinalLocalVariable" />
        <exclude name="OnlyOneReturn" />
        <exclude name="DataflowAnomalyAnalysis" />
        <exclude name="AtLeastOneConstructor" />
        <exclude name="NullAssignment" />
        <exclude name="DefaultPackage" />
    </rule>
    <!--<rule ref="rulesets/java/basic-jsf.xml" />-->
    <!--<rule ref="rulesets/java/basic-jsp.xml" />-->
    <rule ref="rulesets/java/basic.xml" >
        <exclude name="OverrideBothEqualsAndHashcode" />
        <!--<exclude name="EmptyCatchBlock" />-->
    </rule>
    <!--<rule ref="rulesets/java/basic.xml/EmptyCatchBlock" >
        <priority>5</priority>
        <properties>
            <property name="allowCommentedBlocks" value="true" />
        </properties>
    </rule>-->
    
    
</ruleset>

